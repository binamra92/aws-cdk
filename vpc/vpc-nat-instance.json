{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "VPC: highly available NAT instance for private subnets, a cloudonaut.io template",
	"Parameters": {
		"VPC": {
			"Description": "Use VPC output from vpc/vpc-*azs stack.",
			"Type": "AWS::EC2::VPC::Id"
		},
		"PublicSubnets": {
			"Description": "Use SubnetAPublic, SubnetBPublic [, SubnetCPublic[, SubnetDPublic]] output from vpc/vpc-*azs stack.",
			"Type": "List<AWS::EC2::Subnet::Id>"
		},
		"ClassB": {
			"Description": "Use ClassB output from vpc/vpc-*azs stack.",
			"Type": "Number",
			"MinValue": "0",
			"MaxValue": "255"
		},
		"RouteTablePrivate": {
			"Description": "Use RouteTablePrivate output from vpc/vpc-*azs stack.",
			"Type": "String"
		},
		"SSHBastionSecurityGroup": {
			"Description": "Optional use SSHBastionSecurityGroup output from vpc/vpc-ssh-bastion stack.",
			"Type": "String",
			"Default": ""
		},
		"KeyName": {
			"Description": "Optional key pair of the ec2-user to establish a SSH connection to the NAT instance.",
			"Type": "String",
			"Default": ""
		},
		"IAMUserSSHAccess": {
			"Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
			"Type": "String",
			"AllowedValues": ["true", "false"],
			"Default": "false"
		},
		"NATInstanceType": {
			"Type": "String",
			"Default": "t2.nano",
			"Description": "Instance type of the NAT instance. Keep in mind that different instances come with different network capabilities."
		},
		"LogsRetentionInDays": {
			"Description": "Specifies the number of days you want to retain log events.",
			"Type": "Number",
			"AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653],
			"Default": 14
		},
		"NewRelicLicenseKey": {
			"Description": "Optional New Relic License Key will install the New Relic Servers for Linux agent.",
			"Type": "String",
			"Default": "",
			"NoEcho": "true"
		}
	},
	"Mappings": {
		"RegionMap": {
			"ap-south-1": {"NATAMI": "ami-e2b9d38d"},
			"eu-west-1": {"NATAMI": "ami-a8dd45db"},
			"ap-southeast-1": {"NATAMI": "ami-a79b49c4"},
			"ap-southeast-2": {"NATAMI": "ami-53371f30"},
			"eu-central-1": {"NATAMI": "ami-5825cd37"},
			"ap-northeast-2": {"NATAMI": "ami-d14388bf"},
			"ap-northeast-1": {"NATAMI": "ami-2443b745"},
			"us-east-1": {"NATAMI": "ami-4868ab25"},
			"sa-east-1": {"NATAMI": "ami-9336bcff"},
			"us-west-1": {"NATAMI": "ami-004b0f60"},
			"us-west-2": {"NATAMI": "ami-a275b1c2"}
		}
	},
	"Conditions": {
		"HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]},
		"HasIAMUserSSHAccess": {"Fn::Equals": ["true", {"Ref": "IAMUserSSHAccess"}]},
		"HasSSHBastionSecurityGroup": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "SSHBastionSecurityGroup"}]}]},
		"HasNewRelic": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "NewRelicLicenseKey"}]}]}
	},
	"Resources": {
		"EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"Logs": {
			"Type": "AWS::Logs::LogGroup",
			"Properties": {
				"RetentionInDays": {"Ref": "LogsRetentionInDays"}
			}
		},
		"NATSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": {"Fn::Sub": "NAT instance 10.${ClassB}.0.0/16"},
				"SecurityGroupEgress": [{
					"IpProtocol": "udp",
					"FromPort": 123,
					"ToPort": 123,
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": 80,
					"ToPort": 80,
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": 443,
					"ToPort": 443,
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupIngress": [{
					"IpProtocol": "udp",
					"FromPort": 123,
					"ToPort": 123,
					"CidrIp": {"Fn::Sub": "10.${ClassB}.0.0/16"}
				}, {
					"IpProtocol": "tcp",
					"FromPort": 80,
					"ToPort": 80,
					"CidrIp": {"Fn::Sub": "10.${ClassB}.0.0/16"}
				}, {
					"IpProtocol": "tcp",
					"FromPort": 443,
					"ToPort": 443,
					"CidrIp": {"Fn::Sub": "10.${ClassB}.0.0/16"}
				}],
				"VpcId": {"Ref": "VPC"}
			}
		},
		"NATSecurityGroupInSSHBastion": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasSSHBastionSecurityGroup",
			"Properties": {
				"GroupId": {"Ref": "NATSecurityGroup"},
				"IpProtocol": "tcp",
				"FromPort": 22,
				"ToPort": 22,
				"SourceSecurityGroupId": {"Ref": "SSHBastionSecurityGroup"}
			}
		},
		"NATInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{"Ref": "NATIAMRole"}]
			}
		},
		"NATIAMRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "ec2",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Sid": "Stmt1425023276000",
							"Effect": "Allow",
							"Action": [
								"ec2:AssociateAddress",
								"ec2:ModifyInstanceAttribute",
								"ec2:CreateRoute",
								"ec2:ReplaceRoute"
							],
							"Resource": [
								"*"
							]
						}]
					}
				}, {
					"PolicyName": "logs",
					"PolicyDocument":{
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents",
								"logs:DescribeLogStreams"
							],
							"Resource": [
								"arn:aws:logs:*:*:*"
							]
						}]
					}
				}]
			}
		},
		"NATIAMPolicySSHAccess": {
			"Type": "AWS::IAM::Policy",
			"Condition": "HasIAMUserSSHAccess",
			"Properties": { 
				"Roles": [{"Ref": "NATIAMRole"}],
				"PolicyName": "iam",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"iam:ListUsers"
						],
						"Resource": [
							"*"
						]
					}, {
						"Effect": "Allow",
						"Action": [
							"iam:ListSSHPublicKeys",
							"iam:GetSSHPublicKey"
						],
						"Resource": [
							{"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"}
						]
					}]
				}
			}
		},
		"NATLaunchConfiguration": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
				"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"default": {"Fn::If": ["HasNewRelic",
							{"Fn::If": ["HasIAMUserSSHAccess",
								["ssh-access", "newrelic", "config"],
								["newrelic", "config"]]}, 
							{"Fn::If": ["HasIAMUserSSHAccess",
								["ssh-access", "config"],
								["config"]]
							}]
						}
					},
					"newrelic": {
						"packages": {
							"rpm": {
								"newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm"
							}
						},
						"files": {
							"/etc/newrelic/nrsysmond.cfg": {
								"content": {"Fn::Join": ["", [
									"license_key=", {"Ref": "NewRelicLicenseKey"}, "\n",
									"loglevel=info", "\n",
									"logfile=/var/log/newrelic/nrsysmond.log", "\n",
									"labels=StackName:", {"Ref": "AWS::StackName"}, ";AccountId:", {"Ref": "AWS::AccountId"}, ";Region:", {"Ref": "AWS::Region"}, "\n"
								]]},
								"mode": "000640",
								"owner": "root",
								"group": "newrelic"
							}
						},
						"services": {
							"sysvinit": {
								"newrelic-sysmond": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/newrelic/nrsysmond.cfg"
									]
								}
							}
						}
					},
					"ssh-access": {
						"files": {
							"/opt/authorized_keys_command.sh": {
								"content": {"Fn::Join": ["", [
									"#!/bin/bash -e", "\n",
									"if [ -z \"$1\" ]; then", "\n",
									"  exit 1", "\n",
									"fi", "\n",
									"aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do", "\n",
									"  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text", "\n",
									"done", "\n"
								]]},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/opt/import_users.sh": {
								"content": {"Fn::Join": ["", [
									"#!/bin/bash", "\n",
									"aws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do", "\n",
									"  if id -u \"$User\" >/dev/null 2>&1; then", "\n",
									"    echo \"$User exists\"", "\n",
									"  else", "\n",
									"    /usr/sbin/adduser \"$User\"", "\n",
									"    echo \"$User ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$User\"", "\n",
									"  fi", "\n",
									"done", "\n"
								]]},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/etc/cron.d/import_users": {
								"content": "*/10 * * * * root /opt/import_users.sh\n",
								"mode": "000644",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"a_configure_sshd_command": {
								"command": "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
							},
							"b_configure_sshd_commanduser": {
								"command": "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
							},
							"c_import_users": {
								"command": "./import_users.sh",
								"cwd": "/opt"
							}
						},
						"services": {
							"sysvinit": {
								"sshd": {
									"enabled": "true",
									"ensureRunning": "true",
									"commands": [
										"a_configure_sshd_command",
										"b_configure_sshd_commanduser"
									]
								}
							}
						}
					},
					"config": {
						"packages": {
							"yum": {
								"awslogs": []
							}
						},
						"files": {
							"/etc/awslogs/awscli.conf": {
								"content": {"Fn::Join": ["", [
									"[default]", "\n",
									"region = ", {"Ref": "AWS::Region"}, "\n",
									"\n",
									"[plugins]", "\n",
									"cwlogs = cwlogs", "\n"
								]]},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/awslogs/awslogs.conf": {
								"content": {"Fn::Join": ["", [
									"[general]", "\n",
									"state_file = /var/lib/awslogs/agent-state", "\n",
									"\n",
									"[/var/log/messages]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/messages", "\n",
									"log_stream_name = {instance_id}/var/log/messages", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/secure]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/secure", "\n",
									"log_stream_name = {instance_id}/var/log/secure", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/cron]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/cron", "\n",
									"log_stream_name = {instance_id}/var/log/cron", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/cloud-init.log]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/cloud-init.log", "\n",
									"log_stream_name = {instance_id}/var/log/cloud-init.log", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/cfn-init.log]", "\n",
									"datetime_format = %Y-%m-%d %H:%M:%S", "\n",
									"file = /var/log/cfn-init.log", "\n",
									"log_stream_name = {instance_id}/var/log/cfn-init.log", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/cfn-hup.log]", "\n",
									"datetime_format = %Y-%m-%d %H:%M:%S", "\n",
									"file = /var/log/cfn-hup.log", "\n",
									"log_stream_name = {instance_id}/var/log/cfn-hup.log", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/cfn-init-cmd.log]", "\n",
									"datetime_format = %Y-%m-%d %H:%M:%S", "\n",
									"file = /var/log/cfn-init-cmd.log", "\n",
									"log_stream_name = {instance_id}/var/log/cfn-init-cmd.log", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/cloud-init-output.log]", "\n",
									"file = /var/log/cloud-init-output.log", "\n",
									"log_stream_name = {instance_id}/var/log/cloud-init-output.log", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n",
									"[/var/log/dmesg]", "\n",
									"file = /var/log/dmesg", "\n",
									"log_stream_name = {instance_id}/var/log/dmesg", "\n",
									"log_group_name = ", {"Ref": "Logs"}, "\n",
									"\n"
								]]},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/cfn-hup.conf": {
								"content": {"Fn::Join": ["", [
									"[main]", "\n",
									"stack=", {"Ref": "AWS::StackId"}, "\n",
									"region=", {"Ref": "AWS::Region"}, "\n",
									"interval=1", "\n"
								]]},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {"Fn::Join": ["", [
									"[cfn-auto-reloader-hook]", "\n",
									"triggers=post.update", "\n",
									"path=Resources.NATLaunchConfiguration.Metadata.AWS::CloudFormation::Init", "\n",
									"action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=NATLaunchConfiguration", "\n",
									"runas=root", "\n"
								]]}
							}
						},
						"services": {
							"sysvinit": {
								"awslogs": {
									"enabled": "true",
									"ensureRunning": "true",
									"packages": {
										"yum": ["awslogs"]
									},
									"files": [
										"/etc/awslogs/awslogs.conf",
										"/etc/awslogs/awscli.conf"
									]
								},
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"AssociatePublicIpAddress": true,
				"EbsOptimized": false,
				"IamInstanceProfile": {"Ref": "NATInstanceProfile"},
				"ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "NATAMI"]},
				"InstanceType": {"Ref": "NATInstanceType"},
				"SecurityGroups": [{"Ref": "NATSecurityGroup"}],
				"KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
				"UserData": { "Fn::Base64": { "Fn::Join": ["", [
					"#!/bin/bash -x", "\n",
					"INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)", "\n",
					"aws --region ", {"Ref": "AWS::Region"}, " ec2 associate-address --instance-id $INSTANCEID --allocation-id ", {"Fn::GetAtt": ["EIP" , "AllocationId"]},
						" && aws --region ", {"Ref": "AWS::Region"}, " ec2 modify-instance-attribute --instance-id $INSTANCEID --source-dest-check \"{\\\"Value\\\": false}\"", 
						" && (aws --region ", {"Ref": "AWS::Region"}, " ec2 replace-route --route-table-id ", {"Ref": "RouteTablePrivate"}, " --destination-cidr-block \"0.0.0.0/0\" --instance-id $INSTANCEID || aws --region ", {"Ref": "AWS::Region"}, " ec2 create-route --route-table-id ", {"Ref": "RouteTablePrivate"}," --destination-cidr-block \"0.0.0.0/0\" --instance-id $INSTANCEID)",
						" && /opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource NATLaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
					"/opt/aws/bin/cfn-signal -e $? --region ", {"Ref": "AWS::Region"}, " --stack ", {"Ref": "AWS::StackName"}, " --resource NATAutoScalingGroup", "\n"
				]]}}
			}
		},
		"NATAutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"DesiredCapacity": "1",
				"LaunchConfigurationName": { "Ref": "NATLaunchConfiguration" },
				"MaxSize": "1",
				"MinSize": "1",
				"Tags": [{
					"Key": "Name",
					"Value": {"Fn::Sub": "NAT instance 10.${ClassB}.0.0/16"},
					"PropagateAtLaunch": true
				}],
				"VPCZoneIdentifier": {"Ref": "PublicSubnets"}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Count": 1,
					"Timeout": "PT10M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"PauseTime": "PT10M",
					"WaitOnResourceSignals": true
				}
			}
		}
	},
	"Outputs": {
	}
}
