---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: highly available OpenVPN, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentSSHBastionStack
      - ParentAlertStack
      - ParentZoneStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - KeyName
      - IAMUserSSHAccess
      - LogsRetentionInDays
      - SubDomainName
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to OpenVPN.'
    Type: String
    Default: ''
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'Instance type of OpenVPN.'
    Type: String
    Default: 't2.nano'
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  SubDomainName:
    Description: 'Name that is used to create the DNS entry ${SubDomainName}.${HostedZoneName} (required when ParentZoneStack is set, otherwise not considered)'
    Type: String
    Default: 'vpn'
Mappings:
  RegionMap:
    'ap-south-1':
      NATAMI: 'ami-0c184c63'
    'eu-west-3':
      NATAMI: 'ami-7612a50b'
    'eu-west-2':
      NATAMI: 'ami-fdd9c199'
    'eu-west-1':
      NATAMI: 'ami-cd5fcbb4'
    'ap-northeast-2':
      NATAMI: 'ami-90e747fe'
    'ap-northeast-1':
      NATAMI: 'ami-f1930e97'
    'sa-east-1':
      NATAMI: 'ami-6083c00c'
    'ca-central-1':
      NATAMI: 'ami-47cb4e23'
    'ap-southeast-1':
      NATAMI: 'ami-5d87f021'
    'ap-southeast-2':
      NATAMI: 'ami-e1986a83'
    'eu-central-1':
      NATAMI: 'ami-bba838d4'
    'us-east-1':
      NATAMI: 'ami-3e83d444'
    'us-east-2':
      NATAMI: 'ami-2e19324b'
    'us-west-1':
      NATAMI: 'ami-c59495a5'
    'us-west-2':
      NATAMI: 'ami-0541ea7d'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasNotSSHBastionSecurityGroup: !Equals [!Ref ParentSSHBastionStack, '']
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
Resources:
  StorageSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'openvpn-storage'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref SecurityGroup
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
  Storage:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
      - Key: Name
        Value: 'openvpn-master-storage'
      PerformanceMode: generalPurpose
  StoragePercentIOLimitTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average IO utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EFS'
      MetricName: PercentIOLimit
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: FileSystemId
        Value: !Ref Storage
  StorageBurstCreditBalanceTooLowAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'EFS file system is running out of burst credits. You can expect a significant performance drop in the next hour.'
      Namespace: 'AWS/EFS'
      MetricName: BurstCreditBalance
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 192416666667 # 192 GB in Bytes (last hour where you can burst at 100 MB/sec)
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: FileSystemId
        Value: !Ref Storage
  StorageMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref Storage
      SecurityGroups:
      - !Ref StorageSG
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
  StorageMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref Storage
      SecurityGroups:
      - !Ref StorageSG
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      Name: !Sub
      - '${SubDomainName}.${HostedZoneName}'
      - SubDomainName: !Ref SubDomainName
        HostedZoneName:
          'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'
      ResourceRecords:
      - !Ref EIP
      TTL: 60
      Type: A
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: OpenVPN
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: 1194
        ToPort: 1194
        CidrIp: '0.0.0.0/0'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  SecurityGroupInSSHWorld:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: 'ec2'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:AssociateAddress'
            - 'ec2:ModifyInstanceAttribute'
            Resource:
            - '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource:
            - 'arn:aws:logs:*:*:*'
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: !If [HasIAMUserSSHAccess, [awslogs, ssh-access, mount, install, config], [awslogs, mount, install, config]]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
        ssh-access:
          files:
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                UnsaveUserName="$1"
                UnsaveUserName=${UnsaveUserName//".plus."/"+"}
                UnsaveUserName=${UnsaveUserName//".equal."/"="}
                UnsaveUserName=${UnsaveUserName//".comma."/","}
                UnsaveUserName=${UnsaveUserName//".at."/"@"}
                aws iam list-ssh-public-keys --user-name "$UnsaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash -e
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if [ "${#SaveUserName}" -le "32" ]; then
                    if ! id -u "$SaveUserName" >/dev/null 2>&1; then
                      #sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.
                      SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                      /usr/sbin/useradd "$SaveUserName"
                      echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                    fi
                  else
                    echo "Can not import IAM user ${SaveUserName}. User name is longer than 32 characters."
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            'a_configure_sshd_command':
              command: 'sed -i "s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g" /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -i "s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g" /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
        mount:
          packages:
            yum:
              'nfs-utils': []
          files:
            '/root/mount.sh':
              content: !Sub |
                while ! nc -z ${Storage}.efs.${AWS::Region}.amazonaws.com 2049; do sleep 10; done
                sleep 10
                mkdir -p /mnt/storage
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 "${Storage}.efs.${AWS::Region}.amazonaws.com:/" /mnt/storage
                mkdir -p /mnt/storage/etc
                mkdir -p /mnt/storage/easy-rsa
                mkdir -p /etc/openvpn
                mkdir -p /usr/share/easy-rsa
                mount --bind /mnt/storage/etc /etc/openvpn
                mount --bind /mnt/storage/easy-rsa /usr/share/easy-rsa
              mode: '000500'
              owner: root
              group: root
          commands:
            'a_mount':
              command: '/root/mount.sh'
              test: 'if mount | grep -q /mnt/storage; then exit 1; else exit 0; fi'
        install:
          packages:
            yum:
              openvpn: ['2.4.4']
          commands:
            'a_install_easy_rsa':
              command: 'yum install -y --enablerepo=epel easy-rsa-2.2.2'
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchConfiguration
                runas=root
            '/etc/openvpn/server.conf':
              content: !Sub
              - |
                  # Which local IP address should OpenVPN
                  # listen on? (optional)
                  ;local a.b.c.d

                  # Which TCP/UDP port should OpenVPN listen on?
                  # If you want to run multiple OpenVPN instances
                  # on the same machine, use a different port
                  # number for each one.  You will need to
                  # open up this port on your firewall.
                  port 1194

                  # TCP or UDP server?
                  ;proto tcp
                  proto udp

                  # "dev tun" will create a routed IP tunnel,
                  # "dev tap" will create an ethernet tunnel.
                  # Use "dev tap0" if you are ethernet bridging
                  # and have precreated a tap0 virtual interface
                  # and bridged it with your ethernet interface.
                  # If you want to control access policies
                  # over the VPN, you must create firewall
                  # rules for the the TUN/TAP interface.
                  # On non-Windows systems, you can give
                  # an explicit unit number, such as tun0.
                  # On Windows, use "dev-node" for this.
                  # On most systems, the VPN will not function
                  # unless you partially or fully disable
                  # the firewall for the TUN/TAP interface.
                  ;dev tap
                  dev tun

                  # Windows needs the TAP-Win32 adapter name
                  # from the Network Connections panel if you
                  # have more than one.  On XP SP2 or higher,
                  # you may need to selectively disable the
                  # Windows firewall for the TAP adapter.
                  # Non-Windows systems usually don't need this.
                  ;dev-node MyTap

                  # SSL/TLS root certificate (ca), certificate
                  # (cert), and private key (key).  Each client
                  # and the server must have their own cert and
                  # key file.  The server and all clients will
                  # use the same ca file.
                  #
                  # See the "easy-rsa" directory for a series
                  # of scripts for generating RSA certificates
                  # and private keys.  Remember to use
                  # a unique Common Name for the server
                  # and each of the client certificates.
                  #
                  # Any X509 key management system can be used.
                  # OpenVPN can also use a PKCS #12 formatted key file
                  # (see "pkcs12" directive in man page).
                  ca ca.crt
                  cert server.crt
                  key server.key  # This file should be kept secret

                  # Diffie hellman parameters.
                  # Generate your own with:
                  #   openssl dhparam -out dh2048.pem 2048
                  dh dh2048.pem

                  # Network topology
                  # Should be subnet (addressing via IP)
                  # unless Windows clients v2.0.9 and lower have to
                  # be supported (then net30, i.e. a /30 per client)
                  # Defaults to net30 (not recommended)
                  ;topology subnet

                  # Configure server mode and supply a VPN subnet
                  # for OpenVPN to draw client addresses from.
                  # The server will take 10.8.0.1 for itself,
                  # the rest will be made available to clients.
                  # Each client will be able to reach the server
                  # on 10.8.0.1. Comment this line out if you are
                  # ethernet bridging. See the man page for more info.
                  server 10.8.0.0 255.255.255.0

                  # Maintain a record of client <-> virtual IP address
                  # associations in this file.  If OpenVPN goes down or
                  # is restarted, reconnecting clients can be assigned
                  # the same virtual IP address from the pool that was
                  # previously assigned.
                  ifconfig-pool-persist ipp.txt

                  # Configure server mode for ethernet bridging.
                  # You must first use your OS's bridging capability
                  # to bridge the TAP interface with the ethernet
                  # NIC interface.  Then you must manually set the
                  # IP/netmask on the bridge interface, here we
                  # assume 10.8.0.4/255.255.255.0.  Finally we
                  # must set aside an IP range in this subnet
                  # (start=10.8.0.50 end=10.8.0.100) to allocate
                  # to connecting clients.  Leave this line commented
                  # out unless you are ethernet bridging.
                  ;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100

                  # Configure server mode for ethernet bridging
                  # using a DHCP-proxy, where clients talk
                  # to the OpenVPN server-side DHCP server
                  # to receive their IP address allocation
                  # and DNS server addresses.  You must first use
                  # your OS's bridging capability to bridge the TAP
                  # interface with the ethernet NIC interface.
                  # Note: this mode only works on clients (such as
                  # Windows), where the client-side TAP adapter is
                  # bound to a DHCP client.
                  ;server-bridge

                  # Push routes to the client to allow it
                  # to reach other private subnets behind
                  # the server.  Remember that these
                  # private subnets will also need
                  # to know to route the OpenVPN client
                  # address pool (10.8.0.0/255.255.255.0)
                  # back to the OpenVPN server.
                  ;push "route 192.168.10.0 255.255.255.0"
                  ;push "route 192.168.20.0 255.255.255.0"
                  push "route 10.${ClassB}.0.0 255.255.0.0"

                  # To assign specific IP addresses to specific
                  # clients or if a connecting client has a private
                  # subnet behind it that should also have VPN access,
                  # use the subdirectory "ccd" for client-specific
                  # configuration files (see man page for more info).

                  # EXAMPLE: Suppose the client
                  # having the certificate common name "Thelonious"
                  # also has a small subnet behind his connecting
                  # machine, such as 192.168.40.128/255.255.255.248.
                  # First, uncomment out these lines:
                  ;client-config-dir ccd
                  ;route 192.168.40.128 255.255.255.248
                  # Then create a file ccd/Thelonious with this line:
                  #   iroute 192.168.40.128 255.255.255.248
                  # This will allow Thelonious' private subnet to
                  # access the VPN.  This example will only work
                  # if you are routing, not bridging, i.e. you are
                  # using "dev tun" and "server" directives.

                  # EXAMPLE: Suppose you want to give
                  # Thelonious a fixed VPN IP address of 10.9.0.1.
                  # First uncomment out these lines:
                  ;client-config-dir ccd
                  ;route 10.9.0.0 255.255.255.252
                  # Then add this line to ccd/Thelonious:
                  #   ifconfig-push 10.9.0.1 10.9.0.2

                  # Suppose that you want to enable different
                  # firewall access policies for different groups
                  # of clients.  There are two methods:
                  # (1) Run multiple OpenVPN daemons, one for each
                  #     group, and firewall the TUN/TAP interface
                  #     for each group/daemon appropriately.
                  # (2) (Advanced) Create a script to dynamically
                  #     modify the firewall in response to access
                  #     from different clients.  See man
                  #     page for more info on learn-address script.
                  ;learn-address ./script

                  # If enabled, this directive will configure
                  # all clients to redirect their default
                  # network gateway through the VPN, causing
                  # all IP traffic such as web browsing and
                  # and DNS lookups to go through the VPN
                  # (The OpenVPN server machine may need to NAT
                  # or bridge the TUN/TAP interface to the internet
                  # in order for this to work properly).
                  ;push "redirect-gateway def1 bypass-dhcp"

                  # Certain Windows-specific network settings
                  # can be pushed to clients, such as DNS
                  # or WINS server addresses.  CAVEAT:
                  # http://openvpn.net/faq.html#dhcpcaveats
                  # The addresses below refer to the public
                  # DNS servers provided by opendns.com.
                  ;push "dhcp-option DNS 208.67.222.222"
                  ;push "dhcp-option DNS 208.67.220.220"

                  # Uncomment this directive to allow different
                  # clients to be able to "see" each other.
                  # By default, clients will only see the server.
                  # To force clients to only see the server, you
                  # will also need to appropriately firewall the
                  # server's TUN/TAP interface.
                  ;client-to-client

                  # Uncomment this directive if multiple clients
                  # might connect with the same certificate/key
                  # files or common names.  This is recommended
                  # only for testing purposes.  For production use,
                  # each client should have its own certificate/key
                  # pair.
                  #
                  # IF YOU HAVE NOT GENERATED INDIVIDUAL
                  # CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
                  # EACH HAVING ITS OWN UNIQUE "COMMON NAME",
                  # UNCOMMENT THIS LINE OUT.
                  ;duplicate-cn

                  # The keepalive directive causes ping-like
                  # messages to be sent back and forth over
                  # the link so that each side knows when
                  # the other side has gone down.
                  # Ping every 10 seconds, assume that remote
                  # peer is down if no ping received during
                  # a 120 second time period.
                  keepalive 10 120

                  # For extra security beyond that provided
                  # by SSL/TLS, create an "HMAC firewall"
                  # to help block DoS attacks and UDP port flooding.
                  #
                  # Generate with:
                  #   openvpn --genkey --secret ta.key
                  #
                  # The server and each client must have
                  # a copy of this key.
                  # The second parameter should be '0'
                  # on the server and '1' on the clients.
                  tls-auth ta.key 0 # This file is secret

                  # Select a cryptographic cipher.
                  # This config item must be copied to
                  # the client config file as well.
                  # Note that v2.4 client/server will automatically
                  # negotiate AES-256-GCM in TLS mode.
                  # See also the ncp-cipher option in the manpage
                  cipher AES-256-CBC

                  # Enable compression on the VPN link and push the
                  # option to the client (v2.4+ only, for earlier
                  # versions see below)
                  ;compress lz4-v2
                  ;push "compress lz4-v2"

                  # For compression compatible with older clients use comp-lzo
                  # If you enable it here, you must also
                  # enable it in the client config file.
                  ;comp-lzo

                  # The maximum number of concurrently connected
                  # clients we want to allow.
                  ;max-clients 100

                  # It's a good idea to reduce the OpenVPN
                  # daemon's privileges after initialization.
                  #
                  # You can uncomment this out on
                  # non-Windows systems.
                  user nobody
                  group nobody

                  # The persist options will try to avoid
                  # accessing certain resources on restart
                  # that may no longer be accessible because
                  # of the privilege downgrade.
                  persist-key
                  persist-tun

                  # Output a short status file showing
                  # current connections, truncated
                  # and rewritten every minute.
                  status openvpn-status.log

                  # By default, log messages will go to the syslog (or
                  # on Windows, if running as a service, they will go to
                  # the "\Program Files\OpenVPN\log" directory).
                  # Use log or log-append to override this default.
                  # "log" will truncate the log file on OpenVPN startup,
                  # while "log-append" will append to it.  Use one
                  # or the other (but not both).
                  ;log         openvpn.log
                  log-append  openvpn.log

                  # Set the appropriate level of log
                  # file verbosity.
                  #
                  # 0 is silent, except for fatal errors
                  # 4 is reasonable for general usage
                  # 5 and 6 can help to debug connection problems
                  # 9 is extremely verbose
                  verb 3

                  # Silence repeating messages.  At most 20
                  # sequential messages of the same message
                  # category will be output to the log.
                  ;mute 20

                  # Notify the client that when the server restarts so it
                  # can automatically reconnect.
                  explicit-exit-notify 1
              - ClassB:
                  'Fn::ImportValue': !Sub '${ParentVPCStack}-ClassB'
              mode: '000400'
              owner: root
              group: root
            '/etc/openvpn/README.md':
              content: !Sub |
                # OpenVPN configuration
                ## Server
                To generate certificats and keys:
                ```
                cd /usr/share/easy-rsa/2.0
                ```
                edit the `vars` file with your defaults and then run the following scripts:
                ```
                . ./vars
                ./clean-all
                ./build-ca
                ./build-key-server server
                ./build-dh
                cd keys/
                openvpn --genkey --secret ta.key
                cp ca.crt server.crt server.key dh2048.pem ta.key /etc/openvpn
                ```
                restart OpenVPN
                ```
                service openvpn restart
                ```
                Done.
                ## Client
                ### Generate Certificates and keys
                To generate a new client configuration (each person should have their own!), replace client-xyz with a client name:
                ```
                cd /usr/share/easy-rsa/2.0
                . ./vars
                ./build-key client-xyz
                ```
                copy the following files to the user's machine:
                * `/usr/share/easy-rsa/2.0/keys/ca.crt`
                * `/usr/share/easy-rsa/2.0/keys/client-xyz.crt` and rename to `client.crt` on the user's machine
                * `/usr/share/easy-rsa/2.0/keys/client-xyz.key` and rename to `client.key` on the user's machine
                * `/usr/share/easy-rsa/2.0/keys/ta.key`
                * `/etc/openvpn/client.conf`
                Import the client.conf into OpenVPN.
                ### Config
                ```
                # Specify that we are a client and that we
                # will be pulling certain config file directives
                # from the server.
                client

                # Use the same setting as you are using on
                # the server.
                # On most systems, the VPN will not function
                # unless you partially or fully disable
                # the firewall for the TUN/TAP interface.
                ;dev tap
                dev tun

                # Windows needs the TAP-Win32 adapter name
                # from the Network Connections panel
                # if you have more than one.  On XP SP2,
                # you may need to disable the firewall
                # for the TAP adapter.
                ;dev-node MyTap

                # Are we connecting to a TCP or
                # UDP server?  Use the same setting as
                # on the server.
                ;proto tcp
                proto udp

                # The hostname/IP and port of the server.
                # You can have multiple remote entries
                # to load balance between the servers.
                remote ${EIP} 1194

                # Choose a random host from the remote
                # list for load-balancing.  Otherwise
                # try hosts in the order specified.
                ;remote-random

                # Keep trying indefinitely to resolve the
                # host name of the OpenVPN server.  Very useful
                # on machines which are not permanently connected
                # to the internet such as laptops.
                resolv-retry infinite

                # Most clients don't need to bind to
                # a specific local port number.
                nobind

                # Downgrade privileges after initialization (non-Windows only)
                user nobody
                group nobody

                # Try to preserve some state across restarts.
                persist-key
                persist-tun

                # If you are connecting through an
                # HTTP proxy to reach the actual OpenVPN
                # server, put the proxy server/IP and
                # port number here.  See the man page
                # if your proxy server requires
                # authentication.
                ;http-proxy-retry # retry on connection failures
                ;http-proxy [proxy server] [proxy port #]

                # Wireless networks often produce a lot
                # of duplicate packets.  Set this flag
                # to silence duplicate packet warnings.
                ;mute-replay-warnings

                # SSL/TLS parms.
                # See the server config file for more
                # description.  It's best to use
                # a separate .crt/.key file pair
                # for each client.  A single ca
                # file can be used for all clients.
                ca ca.crt
                cert client.crt
                key client.key

                # Verify server certificate by checking that the
                # certicate has the correct key usage set.
                # This is an important precaution to protect against
                # a potential attack discussed here:
                #  http://openvpn.net/howto.html#mitm
                #
                # To use this feature, you will need to generate
                # your server certificates with the keyUsage set to
                #   digitalSignature, keyEncipherment
                # and the extendedKeyUsage to
                #   serverAuth
                # EasyRSA can do this for you.
                remote-cert-tls server

                # If a tls-auth key is used on the server
                # then every client must also have the key.
                tls-auth ta.key 1

                # Select a cryptographic cipher.
                # If the cipher option is used on the server
                # then you must also specify it here.
                # Note that v2.4 client/server will automatically
                # negotiate AES-256-GCM in TLS mode.
                # See also the ncp-cipher option in the manpage
                cipher AES-256-CBC

                # Enable compression on the VPN link.
                # Don't enable this unless it is also
                # enabled in the server config file.
                #comp-lzo

                # Set log file verbosity.
                verb 3

                # Silence repeating messages
                ;mute 20
                ```
              mode: '000400'
              owner: root
              group: root
          # commands:
          #  'a_generate_ca': # Generate the master Certificate Authority (CA) certificate & key
          #    command: '. ./vars && ./clean-all && ./build-ca'
          #    cwd: '/usr/share/easy-rsa/2.0'
          #    test: '[ ! -f /usr/share/easy-rsa/2.0/keys/ca.crt ]'
          #  'b_generate_server': # Generate certificate & key for server
          #    command: '. ./vars && ./build-key-server server'
          #    cwd: '/usr/share/easy-rsa/2.0'
          #    test: '[ ! -f /usr/share/easy-rsa/2.0/keys/server.crt ]'
          #  'c_generate_dh': # Generate Diffie Hellman parameters
          #    command: '. ./vars && ./build-dh'
          #    cwd: '/usr/share/easy-rsa/2.0'
          #    test: '[ ! -f /usr/share/easy-rsa/2.0/keys/dh2048.pem ]'
          #  'd_generate_tlsauth':
          #    command: '. ./vars && openvpn --genkey --secret ta.key'
          #    cwd: '/usr/share/easy-rsa/2.0/keys'
          #    test: '[ ! -f /usr/share/easy-rsa/2.0/keys/ta.key ]'
          #  'e_copy_server':
          #    command: 'cp ca.crt server.crt server.key dh2048.pem ta.key /etc/openvpn'
          #    cwd: '/usr/share/easy-rsa/2.0/keys'
          services:
            sysvinit:
              openvpn:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/openvpn/server.conf'
                - '/etc/openvpn/client.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', NATAMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          bash -ex << "TRY"
            INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
            aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIP.AllocationId}
            aws --region ${AWS::Region} ec2 modify-instance-attribute --instance-id $INSTANCEID --source-dest-check "{\"Value\": false}"
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 1
      MinSize: 1
      Tags:
      - Key: Name
        Value: OpenVPN
        PropagateAtLaunch: true
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN:
            'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      - !Ref 'AWS::NoValue'
      VPCZoneIdentifier:
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id'
    Value: 'vpc/openvpn'
  StackName:
    Description: 'Stack name'
    Value: !Sub '${AWS::StackName}'
  SecurityGroup:
    Description: 'Use this Security Group to reference incoming traffic from OpenVPN.'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  IPAddress:
    Description: 'The public IP address of OpenVPN.'
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'
