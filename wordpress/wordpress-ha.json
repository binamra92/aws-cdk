{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Wordpress: fault tolerant and scalable, a cloudonaut.io template",
	"Parameters": {
		"VPC": {
			"Description": "Use VPC output vpc/vpc-*azs vpc stack.",
			"Type": "AWS::EC2::VPC::Id"
		},
		"PublicSubnets": {
			"Description": "Use SubnetAPublic, SubnetBPublic [, SubnetCPublic[, SubnetDPublic]] output from vpc/vpc-*azs stack.",
			"Type": "List<AWS::EC2::Subnet::Id>"
		},
		"PrivateSubnets": {
			"Description": "Use SubnetAPrivate, SubnetBPrivate [, SubnetCPrivate[, SubnetDPrivate]] output from vpc/vpc-*azs stack.",
			"Type": "List<AWS::EC2::Subnet::Id>"
		},
		"BlogID": {
			"Description": "A unique identifier for your blog. For internal use only.",
			"Type": "String",
			"AllowedPattern": "[a-z0-9\\-]+",
			"MaxLength": 32,
			"ConstraintDescription": "Only letters, digits or dash allowed."
		},
		"BlogTitle": {
			"Description": "The title of the Wordpress blog.",
			"Type": "String",
			"Default": "Just another Wordpress blog"
		},
		"BlogAdminUsername": {
			"Description": "A username for the Wordpress admin.",
			"Type": "String",
			"Default": "admin"
		},
		"BlogAdminPassword": {
			"Description": "A password for the Wordpress admin.",
			"Type": "String",
			"NoEcho": "true"
		},
		"BlogAdminEMail": {
			"Description": "The email address of the Wordpress admin.",
			"Type": "String"
		},
		"WebServerSSHBastionSecurityGroup": {
			"Description": "Optional use SSHBastionSecurityGroup output from vpc/vpc-ssh-bastion stack.",
			"Type": "String",
			"Default": ""
		},
		"AuthProxySecurityGroup": {
			"Description": "Optional use AuthProxySecurityGroup output from security/auth-proxy-* stack.",
			"Type": "String",
			"Default": ""
		},
		"WebServerKeyName": {
			"Description": "Optional key pair of the ec2-user to establish a SSH connection to the web server.",
			"Type": "String",
			"Default": ""
		},
		"WebServerIAMUserSSHAccess": {
			"Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
			"Type": "String",
			"AllowedValues": ["true", "false"],
			"Default": "false"
		},
		"WebServerInstanceType": {
			"Description": "The instance type of web servers (e.g. t2.micro).",
			"Type": "String",
			"Default": "t2.micro"
		},
		"WebServerLogsRetentionInDays": {
			"Description": "Specifies the number of days you want to retain log events.",
			"Type": "Number",
			"AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653],
			"Default": 14
		},
		"DBServerInstanceType": {
			"Description": "The instance type of database server (e.g. db.t2.micro).",
			"Type": "String",
			"Default": "db.t2.micro"
		},
		"NewRelicLicenseKey": {
			"Description": "Optional New Relic License Key will install the New Relic Servers for Linux agent.",
			"Type": "String",
			"Default": "",
			"NoEcho": "true"
		}
	},
	"Conditions": {
		"HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "WebServerKeyName"}]}]},
		"HasIAMUserSSHAccess": {"Fn::Equals": ["true", {"Ref": "WebServerIAMUserSSHAccess"}]},
		"HasSSHBastionSecurityGroup": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "WebServerSSHBastionSecurityGroup"}]}]},
		"HasAuthProxySecurityGroup": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "AuthProxySecurityGroup"}]}]},
		"HasNotAuthProxySecurityGroup": {"Fn::Equals": ["", {"Ref": "AuthProxySecurityGroup"}]},
		"HasNewRelic": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "NewRelicLicenseKey"}]}]}
	},
	"Mappings": {
		"EC2RegionMap": {
			"ap-south-1": {"AMI": "ami-ffbdd790"},
			"eu-west-1": {"AMI": "ami-f9dd458a"},
			"ap-southeast-1": {"AMI": "ami-a59b49c6"},
			"ap-southeast-2": {"AMI": "ami-dc361ebf"},
			"eu-central-1": {"AMI": "ami-ea26ce85"},
			"ap-northeast-2": {"AMI": "ami-2b408b45"},
			"ap-northeast-1": {"AMI": "ami-374db956"},
			"us-east-1": {"AMI": "ami-6869aa05"},
			"sa-east-1": {"AMI": "ami-6dd04501"},
			"us-west-1": {"AMI": "ami-31490d51"},
			"us-west-2": {"AMI": "ami-7172b611"}
		}
	},
	"Resources": {
		"WebServerLogs": {
			"Type": "AWS::Logs::LogGroup",
			"Properties": {
				"RetentionInDays": {"Ref": "WebServerLogsRetentionInDays"}
			}
		},
		"LoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "wordpress-elb",
				"VpcId": {"Ref": "VPC"}
			}
		},
		"LoadBalancerSecurityGroupInWorld": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasNotAuthProxySecurityGroup",
			"Properties": {
				"GroupId": {"Ref": "LoadBalancerSecurityGroup"},
				"IpProtocol": "tcp",
				"FromPort": 80,
				"ToPort": 80,
				"CidrIp": "0.0.0.0/0"
			}
		},
		"LoadBalancerSecurityGroupInAuthProxy": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasAuthProxySecurityGroup",
			"Properties": {
				"GroupId": {"Ref": "LoadBalancerSecurityGroup"},
				"IpProtocol": "tcp",
				"FromPort": 80,
				"ToPort": 80,
				"SourceSecurityGroupId": {"Ref": "AuthProxySecurityGroup"}
			}
		},
		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "wordpress-ec2",
				"VpcId": {"Ref": "VPC"},
				"SecurityGroupIngress": [{
					"FromPort": 80,
					"IpProtocol": "tcp",
					"SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"},
					"ToPort": 80
				}]
			}
		},
		"WebServerSecurityGroupInSSHBastion": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasSSHBastionSecurityGroup",
			"Properties": {
				"GroupId": {"Ref": "WebServerSecurityGroup"},
				"IpProtocol": "tcp",
				"FromPort": 22,
				"ToPort": 22,
				"SourceSecurityGroupId": {"Ref": "WebServerSSHBastionSecurityGroup"}
			}
		},
		"DatabaseSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "wordpress-rds",
				"VpcId": {"Ref": "VPC"},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}
				}]
			}
		},
		"LoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": {"Ref": "PublicSubnets"},
				"LoadBalancerName": {"Ref": "BlogID"},
				"Listeners": [{
					"InstancePort": "80",
					"InstanceProtocol": "HTTP",
					"LoadBalancerPort": "80",
					"Protocol": "HTTP"
				}],
				"HealthCheck": {
					"HealthyThreshold": "2",
					"Interval": "5",
					"Target": "TCP:80",
					"Timeout": "3",
					"UnhealthyThreshold": "2"
				},
				"SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}],
				"Scheme": "internet-facing",
				"CrossZone": "true"
			}
		},
		"DBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "DB subnet group",
				"SubnetIds": {"Ref": "PrivateSubnets"}
			}
		},
		"Database": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"AllocatedStorage": "5",
				"BackupRetentionPeriod": "0",
				"DBInstanceClass": {"Ref": "DBServerInstanceType"},
				"DBInstanceIdentifier": {"Ref": "BlogID"},
				"DBName": "wordpress",
				"Engine": "MySQL",
				"MasterUsername": "wordpress",
				"MasterUserPassword": "wordpress",
				"VPCSecurityGroups": [{"Fn::GetAtt": ["DatabaseSecurityGroup", "GroupId"]}],
				"DBSubnetGroupName": {"Ref": "DBSubnetGroup"},
				"MultiAZ": "true",
				"StorageType": "gp2"
			}
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {"Ref": "BlogID"}
			}
		},
		"WebServerInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{"Ref": "WebServerIAMRole"}]
			}
		},
		"WebServerIAMRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "s3",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": ["s3:*"],
							"Resource": [
								{"Fn::Sub": "arn:aws:s3:::${BlogID}/*"}
							]
						}] 
					}
				}, {
					"PolicyName": "logs",
					"PolicyDocument":{
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents",
								"logs:DescribeLogStreams"
							],
							"Resource": [
								"arn:aws:logs:*:*:*"
							]
						}]
					}
				}]
			}
		},
		"WebServerIAMPolicySSHAccess": {
			"Type": "AWS::IAM::Policy",
			"Condition": "HasIAMUserSSHAccess",
			"Properties": { 
				"Roles": [{"Ref": "WebServerIAMRole"}],
				"PolicyName": "iam",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"iam:ListUsers"
						],
						"Resource": [
							"*"
						]
					}, {
						"Effect": "Allow",
						"Action": [
							"iam:ListSSHPublicKeys",
							"iam:GetSSHPublicKey"
						],
						"Resource": [
							{"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"}
						]
					}]
				}
			}
		},
		"LaunchConfiguration": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"default": {"Fn::If": ["HasNewRelic",
							{"Fn::If": ["HasIAMUserSSHAccess",
								["ssh-access", "newrelic", "config"],
								["newrelic", "config"]]}, 
							{"Fn::If": ["HasIAMUserSSHAccess",
								["ssh-access", "config"],
								["config"]]
							}]
						}
					},
					"newrelic": {
						"packages": {
							"rpm": {
								"newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm"
							}
						},
						"files": {
							"/etc/newrelic/nrsysmond.cfg": {
								"content": {"Fn::Join": ["", [
									"license_key=", {"Ref": "NewRelicLicenseKey"}, "\n",
									"loglevel=info", "\n",
									"logfile=/var/log/newrelic/nrsysmond.log", "\n",
									"labels=StackName:", {"Ref": "AWS::StackName"}, ";AccountId:", {"Ref": "AWS::AccountId"}, ";Region:", {"Ref": "AWS::Region"}, "\n"
								]]},
								"mode": "000640",
								"owner": "root",
								"group": "newrelic"
							}
						},
						"services": {
							"sysvinit": {
								"newrelic-sysmond": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/newrelic/nrsysmond.cfg"
									]
								}
							}
						}
					},
					"ssh-access": {
						"files": {
							"/opt/authorized_keys_command.sh": {
								"content": {"Fn::Join": ["", [
									"#!/bin/bash -e", "\n",
									"if [ -z \"$1\" ]; then", "\n",
									"  exit 1", "\n",
									"fi", "\n",
									"aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do", "\n",
									"  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text", "\n",
									"done", "\n"
								]]},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/opt/import_users.sh": {
								"content": {"Fn::Join": ["", [
									"#!/bin/bash", "\n",
									"aws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do", "\n",
									"  if id -u \"$User\" >/dev/null 2>&1; then", "\n",
									"    echo \"$User exists\"", "\n",
									"  else", "\n",
									"    /usr/sbin/adduser \"$User\"", "\n",
									"    echo \"$User ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$User\"", "\n",
									"  fi", "\n",
									"done", "\n"
								]]},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/etc/cron.d/import_users": {
								"content": "*/10 * * * * root /opt/import_users.sh\n",
								"mode": "000644",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"a_configure_sshd_command": {
								"command": "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
							},
							"b_configure_sshd_commanduser": {
								"command": "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
							},
							"c_import_users": {
								"command": "./import_users.sh",
								"cwd": "/opt"
							}
						},
						"services": {
							"sysvinit": {
								"sshd": {
									"enabled": "true",
									"ensureRunning": "true",
									"commands": [
										"a_configure_sshd_command",
										"b_configure_sshd_commanduser"
									]
								}
							}
						}
					},
					"config": {
						"packages": {
							"yum": {
								"php": [],
								"php-mysql": [],
								"mysql": [],
								"httpd": [],
								"awslogs": []
							}
						},
						"sources": {
							"/var/www/html": "https://wordpress.org/wordpress-4.6.1.tar.gz"
						},
						"files": {
							"/root/config.sh": {
								"content": {"Fn::Join": ["", [
									"#!/bin/bash -ex\n",
									"cp wp-config-sample.php wp-config.php\n",
									"sed -i \"s/'database_name_here'/'wordpress'/g\" wp-config.php\n",
									"sed -i \"s/'username_here'/'wordpress'/g\" wp-config.php\n",
									"sed -i \"s/'password_here'/'wordpress'/g\" wp-config.php\n",
									"sed -i \"s/'localhost'/'", {"Fn::GetAtt": ["Database", "Endpoint.Address"]}, "'/g\" wp-config.php\n",
									"echo \"define( 'AWS_USE_EC2_IAM_ROLE', true);\" >> wp-config.php \n",
									"echo \"define('DISALLOW_FILE_MODS', true); \" >> wp-config.php \n",
									"echo \"define('WP_AUTO_UPDATE_CORE', false); \" >> wp-config.php \n",
									"chmod -R 777 wp-content/ \n",									
									"curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar \n",
									"php wp-cli.phar core install --url=\"", {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}, "\" --title=\"", {"Ref": "BlogTitle"}, "\" --admin_user=\"", {"Ref": "BlogAdminUsername"}, "\" --admin_password=\"", {"Ref": "BlogAdminPassword"}, "\" --admin_email=\"", {"Ref": "BlogAdminEMail"}, "\" \n",
									"php wp-cli.phar plugin install --activate --version=1.0 amazon-web-services \n",
									"php wp-cli.phar plugin install --activate --version=1.1 amazon-s3-and-cloudfront \n",
									"CHARCOUNT=`printf \"",{"Ref": "BlogID"} ,"\" | wc -c` \n",
									"php wp-cli.phar db query \"DELETE FROM wp_options WHERE option_name = 'tantan_wordpress_s3'; INSERT INTO wp_options (option_name, option_value, autoload) VALUES('tantan_wordpress_s3', 'a:15:{s:17:\\\"post_meta_version\\\";i:1;s:6:\\\"bucket\\\";s:", "$CHARCOUNT", ":\\\"", {"Ref": "BlogID"},"\\\";s:6:\\\"region\\\";s:0:\\\"\\\";s:6:\\\"domain\\\";s:9:\\\"subdomain\\\";s:7:\\\"expires\\\";s:1:\\\"0\\\";s:10:\\\"cloudfront\\\";s:0:\\\"\\\";s:13:\\\"object-prefix\\\";s:19:\\\"wp-content/uploads/\\\";s:10:\\\"copy-to-s3\\\";s:1:\\\"1\\\";s:13:\\\"serve-from-s3\\\";s:1:\\\"1\\\";s:17:\\\"remove-local-file\\\";s:1:\\\"0\\\";s:3:\\\"ssl\\\";s:7:\\\"request\\\";s:12:\\\"hidpi-images\\\";s:1:\\\"0\\\";s:17:\\\"object-versioning\\\";s:1:\\\"0\\\";s:21:\\\"use-yearmonth-folders\\\";s:1:\\\"1\\\";s:20:\\\"enable-object-prefix\\\";s:1:\\\"1\\\";}', 'yes');\" \n"
								]]},
								"mode": "000500",
								"owner": "root",
								"group": "root"
							},
							"/etc/awslogs/awscli.conf": {
								"content": {"Fn::Join": ["", [
									"[default]", "\n",
									"region = ", {"Ref": "AWS::Region"}, "\n",
									"\n",
									"[plugins]", "\n",
									"cwlogs = cwlogs", "\n"
								]]},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/etc/awslogs/awslogs.conf": {
								"content": {"Fn::Join": ["", [
									"[general]", "\n",
									"state_file = /var/lib/awslogs/agent-state", "\n",
									"\n",
									"[/var/log/messages]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/messages", "\n",
									"log_stream_name = {instance_id}/var/log/messages", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/secure]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/secure", "\n",
									"log_stream_name = {instance_id}/var/log/secure", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/cron]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/cron", "\n",
									"log_stream_name = {instance_id}/var/log/cron", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/cloud-init.log]", "\n",
									"datetime_format = %b %d %H:%M:%S", "\n",
									"file = /var/log/cloud-init.log", "\n",
									"log_stream_name = {instance_id}/var/log/cloud-init.log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/cfn-init.log]", "\n",
									"datetime_format = %Y-%m-%d %H:%M:%S", "\n",
									"file = /var/log/cfn-init.log", "\n",
									"log_stream_name = {instance_id}/var/log/cfn-init.log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/cfn-hup.log]", "\n",
									"datetime_format = %Y-%m-%d %H:%M:%S", "\n",
									"file = /var/log/cfn-hup.log", "\n",
									"log_stream_name = {instance_id}/var/log/cfn-hup.log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/cfn-init-cmd.log]", "\n",
									"datetime_format = %Y-%m-%d %H:%M:%S", "\n",
									"file = /var/log/cfn-init-cmd.log", "\n",
									"log_stream_name = {instance_id}/var/log/cfn-init-cmd.log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/cloud-init-output.log]", "\n",
									"file = /var/log/cloud-init-output.log", "\n",
									"log_stream_name = {instance_id}/var/log/cloud-init-output.log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/dmesg]", "\n",
									"file = /var/log/dmesg", "\n",
									"log_stream_name = {instance_id}/var/log/dmesg", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/httpd/access_log]", "\n",
									"datetime_format = %b %d %H:%M:%S %Y", "\n",
									"file = /var/log/httpd/access_log", "\n",
									"log_stream_name = {instance_id}/var/log/httpd/access_log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n",
									"[/var/log/httpd/error_log]", "\n",
									"datetime_format = %d/%b/%Y:%H:%M:%S %z", "\n",
									"file = /var/log/httpd/error_log", "\n",
									"log_stream_name = {instance_id}/var/log/httpd/error_log", "\n",
									"log_group_name = ", {"Ref": "WebServerLogs"}, "\n",
									"\n"
								]]},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"01_mv": {
								"command": "mv * ../",
								"cwd": "/var/www/html/wordpress"
							},
							"02_config": {
								"command": "/root/config.sh",
								"cwd": "/var/www/html"
							}
						},
						"services": {
							"sysvinit": {
								"httpd": {
									"enabled": "true",
									"ensureRunning": "true"
								},
								"awslogs": {
									"enabled": "true",
									"ensureRunning": "true",
									"packages": {
										"yum": ["awslogs"]
									},
									"files": [
										"/etc/awslogs/awslogs.conf",
										"/etc/awslogs/awscli.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"AssociatePublicIpAddress": true,
				"IamInstanceProfile": {"Ref": "WebServerInstanceProfile"},
				"ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
				"InstanceType": {"Ref": "WebServerInstanceType"},
				"SecurityGroups": [{"Ref": "WebServerSecurityGroup"}],
				"KeyName": {"Fn::If": ["HasKeyName", {"Ref": "WebServerKeyName"}, {"Ref": "AWS::NoValue"}]},
				"UserData": {"Fn::Base64": {"Fn::Join": ["", [
					"#!/bin/bash -x\n",
					"/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource LaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
					"/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
				]]}}
			}
		},
		"AutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"LoadBalancerNames": [{"Ref": "LoadBalancer"}],
				"LaunchConfigurationName": {"Ref": "LaunchConfiguration"},
				"MinSize": "2",
				"MaxSize": "4",
				"DesiredCapacity": "2",
				"Cooldown": "60",
				"HealthCheckGracePeriod": "120",
				"HealthCheckType": "ELB",
				"VPCZoneIdentifier": {"Ref": "PublicSubnets"},
				"Tags": [{
					"PropagateAtLaunch": true,
					"Value": "wordpress",
					"Key": "Name"
				}]
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT10M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"PauseTime": "PT10M",
					"WaitOnResourceSignals": true
				}
			}
		},
		"ScalingUpPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "PercentChangeInCapacity",
				"MinAdjustmentStep": "1",
				"AutoScalingGroupName": {"Ref": "AutoScalingGroup"},
				"Cooldown": "300",
				"ScalingAdjustment": "25"
			}
		},
		"CPUHighAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "75",
				"AlarmDescription": "Alarm if CPU load is high.",
				"Period": "60",
				"AlarmActions": [{"Ref": "ScalingUpPolicy"}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {"Ref": "AutoScalingGroup"}
				}],
				"ComparisonOperator": "GreaterThanThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"ScalingDownPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "PercentChangeInCapacity",
				"MinAdjustmentStep": "1",
				"AutoScalingGroupName": {"Ref": "AutoScalingGroup"},
				"Cooldown": "300",
				"ScalingAdjustment": "-25"
			}
		},
		"CPULowAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": "25",
				"AlarmDescription": "Alarm if CPU load is low.",
				"Period": "60",
				"AlarmActions": [{"Ref": "ScalingDownPolicy"}],
				"Namespace": "AWS/EC2",
				"Dimensions": [{
					"Name": "AutoScalingGroupName",
					"Value": {"Ref": "AutoScalingGroup"}
				}],
				"ComparisonOperator": "LessThanThreshold",
				"MetricName": "CPUUtilization"
			}
		}
	},
	"Outputs": {
		"URL": {
			"Value": {"Fn::Sub": "http://${LoadBalancer.DNSName}"},
			"Description": "URL to Wordpress"
		}
	}
}
