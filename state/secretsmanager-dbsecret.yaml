---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: Database Secret, a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentKmsKeyStack
    - Label:
        default: 'Secret Settings'
      Parameters:
      - SecretName
    - Label:
        default: 'DB Password Settings'
      Parameters:
      - DBMasterUsername
      - DBPassword
Parameters:
  ParentKmsKeyStack:
    Description: >-
      'Optional Stack name of parent KMS key stack based on security/kms-key.yaml template
      (If you do not specify this value, then Secrets Manager defaults to the AWS account CMK, aws/secretsmanager).'
    Type: String
    Default: ''
  SecretName:
    Description: Name of the Secret.
    Type: String
    Default: ''
  DBMasterUsername:
    Description: 'The master user name for a DB instance.'
    Type: 'String'
    Default: master
  DBPassword:
    Description: >-
      'Set the password to be used in the secret.
      Use this if you need to preset the password or when you want to duplicate'
    Type: 'String'
    Default: ''
Conditions:
  HasKmsKey: !Not [!Equals [!Ref ParentKmsKeyStack, '']]
  HasSecretName: !Not [!Equals [!Ref ParentKmsKeyStack, '']]
  HasPassword: !Not [!Equals [!Ref DBPassword, '']]
Resources:
  Secret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !If [HasSecretName, !Ref SecretName, !Ref 'AWS::StackName']
      KmsKeyId: !If [HasKmsKey, {'Fn::ImportValue': !Sub '${ParentKmsKeyStack}-KeyId'}, !Ref 'AWS::NoValue']
      GenerateSecretString:
        !If
        - HasPassword
        - !Ref AWS::NoValue
        -
          SecretStringTemplate: !Sub '{"username": "${DBMasterUsername}"}'
          GenerateStringKey: "password"
          PasswordLength: 30
          ExcludeCharacters: '"@/\'
      SecretString:
        !If
        - HasPassword
        - !Sub '{"username":"${DBMasterUsername}","password":"${DBPassword}"}'
        - !Ref AWS::NoValue

Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/secretsmanager-secret.yaml'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  SecretArn:
    Description: 'Secret Arn'
    Value: !Ref Secret
    Export:
      Name: !Sub '${AWS::StackName}-SecretArn'
