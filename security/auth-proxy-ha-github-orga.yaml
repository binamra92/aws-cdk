---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: highly available auth proxy using your GitHub Organization, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentSSHBastionStack
    - Label:
        default: 'Proxy Parameters'
      Parameters:
      - GitHubOrganization
      - GitHubClientId
      - GitHubClientSecret
      - CertificateArn
      - Upstream
      - CookieSecret
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - KeyName
      - IAMUserSSHAccess
      - LogsRetentionInDays
      - NewRelicLicenseKey
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentSSHBastionStack:
    Description: 'Optional Stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.'
    Type: String
    Default: ''
  CertificateArn:
    Description: 'The Amazon Resource Name (ARN) of the certificate to associate with the auth proxy endpoint.'
    Type: String
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the auth proxy.'
    Type: String
    Default: ''
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'Instance type of the auth proxy.'
    Type: String
    Default: 't2.nano'
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  NewRelicLicenseKey:
    Description: 'Optional New Relic License Key will install the New Relic Servers for Linux agent.'
    Type: String
    Default: ''
    NoEcho: true
  GitHubOrganization:
    Description: 'GitHub organization name.'
    Type: String
  GitHubClientId:
    Description: 'GitHub client id. Register a new application here: https://github.com/organizations/$YOUR_ORGANIZATION/settings/applications'
    Type: String
  GitHubClientSecret:
    Description: 'GitHub client secret. Register a new application here: https://github.com/organizations/$YOUR_ORGANIZATION/settings/applications'
    Type: String
    NoEcho: true
  Upstream:
    Description: 'HTTP(S) upstream for the proxy to redirect requests.'
    Type: String
  CookieSecret:
    Description: 'Seed string for secure cookies. Create one with python -c ''import os,base64; print base64.b64encode(os.urandom(16))'''
    Type: String
    NoEcho: true
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-cacbbea5'
    'eu-west-1':
      AMI: 'ami-d41d58a7'
    'ap-northeast-2':
      AMI: 'ami-a04297ce'
    'ap-northeast-1':
      AMI: 'ami-1a15c77b'
    'sa-east-1':
      AMI: 'ami-b777e4db'
    'ap-southeast-1':
      AMI: 'ami-7243e611'
    'ap-southeast-2':
      AMI: 'ami-55d4e436'
    'eu-central-1':
      AMI: 'ami-0044b96f'
    'us-east-1':
      AMI: 'ami-c481fad3'
    'us-east-2':
      AMI: 'ami-71ca9114'
    'us-west-1':
      AMI: 'ami-de347abe'
    'us-west-2':
      AMI: 'ami-b04e92d0'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasNewRelic: !Not [!Equals [!Ref NewRelicLicenseKey, '']]
Resources:
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Auth proxy'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
      Tags:
      - Key: Name
        Value: 'Auth proxy'
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/ping'
      HealthCheckPort: 4180
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 8
      Matcher:
        HttpCode: 200
      Port: 4180
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'Auth proxy'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions:
      - TargetGroupArn: !Ref LoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Auth proxy'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 4180
        ToPort: 4180
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource:
            - 'arn:aws:logs:*:*:*'
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            !If
            - HasNewRelic
            - !If [HasIAMUserSSHAccess, [ssh-access, newrelic, config], [newrelic, config]]
            - !If [HasIAMUserSSHAccess, [ssh-access, config], [config]]
        newrelic:
          packages:
            rpm:
              newrelic-sysmond: 'https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm'
          files:
            '/etc/newrelic/nrsysmond.cfg':
              content: !Sub |
                license_key=${NewRelicLicenseKey}
                loglevel=info
                logfile=/var/log/newrelic/nrsysmond.log
                labels=StackName:${AWS::StackName};AccountId:${AWS::AccountId};Region:${AWS::Region}
              mode: '000640'
              owner: root
              group: newrelic
          services:
            sysvinit:
              newrelic-sysmond:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/newrelic/nrsysmond.cfg'
        ssh-access:
          files:
            '/opt/authorized_keys_command.sh':
              content: !Sub |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                aws iam list-ssh-public-keys --user-name "$1" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read KeyId;
                do
                  aws iam get-ssh-public-key --user-name "$1" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: !Sub |
                #!/bin/bash
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  if id -u "$User" >/dev/null 2>&1; then
                    echo "$User exists"
                  else
                    /usr/sbin/adduser "$User"
                    echo "$User ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$User"
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            'a_configure_sshd_command':
              command: 'sed -i "s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g" /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -i "s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g" /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
        config:
          users:
            oauth2_proxy: {}
          sources:
            /opt/oauth2_proxy: 'https://github.com/bitly/oauth2_proxy/releases/download/v2.1/oauth2_proxy-2.1.linux-amd64.go1.6.tar.gz'
          packages:
            yum:
              awslogs: []
          files:
            '/etc/oauth2_proxy.cfg':
              content: !Sub |
                ## OAuth2 Proxy Config File
                ## https://github.com/bitly/oauth2_proxy
                http_address = "0.0.0.0:4180"
                upstreams = [
                  "${Upstream}"
                ]
                request_logging = false
                pass_basic_auth = false
                email_domains = [
                  "*"
                ]
                client_id = "${GitHubClientId}"
                client_secret = "${GitHubClientSecret}"
                cookie_secret = "${CookieSecret}"
                provider = "github"
                github-team = "${GitHubOrganization}"
              mode: '000644'
              owner: root
              group: root
            '/etc/init.d/oauth2_proxy':
              content: !Sub |
                #!/bin/sh
                ### BEGIN INIT INFO
                # Provides:
                # Required-Start:    $remote_fs $syslog
                # Required-Stop:     $remote_fs $syslog
                # Default-Start:     2 3 4 5
                # Default-Stop:      0 1 6
                # Short-Description: Start daemon at boot time
                # Description:       Enable service provided by daemon.
                ### END INIT INFO
                dir="/opt/oauth2_proxy/oauth2_proxy-2.1.linux-amd64.go1.6"
                cmd="./oauth2_proxy -config=/etc/oauth2_proxy.cfg"
                user="oauth2_proxy"
                name=`basename $0`
                pid_file="/var/run/$name.pid"
                stdout_log="/var/log/$name.log"
                stderr_log="/var/log/$name.err"
                get_pid() {
                    cat "$pid_file"
                }
                is_running() {
                    [ -f "$pid_file" ] && ps `get_pid` > /dev/null 2>&1
                }
                case "$1" in
                    start)
                    if is_running; then
                        echo "Already started"
                    else
                        echo "Starting $name"
                        cd "$dir"
                        if [ -z "$user" ]; then
                            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
                        else
                            sudo -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
                        fi
                        echo $! > "$pid_file"
                        if ! is_running; then
                            echo "Unable to start, see $stdout_log and $stderr_log"
                            exit 1
                        fi
                    fi
                    ;;
                    stop)
                    if is_running; then
                        echo -n "Stopping $name.."
                        kill `get_pid`
                        for i in {1..10}
                        do
                            if ! is_running; then
                                break
                            fi
                            echo -n "."
                            sleep 1
                        done
                        echo
                        if is_running; then
                            echo "Not stopped; may still be shutting down or shutdown may have failed"
                            exit 1
                        else
                            echo "Stopped"
                            if [ -f "$pid_file" ]; then
                                rm "$pid_file"
                            fi
                        fi
                    else
                        echo "Not running"
                    fi
                    ;;
                    restart)
                    $0 stop
                    if is_running; then
                        echo "Unable to stop, will not attempt to start"
                        exit 1
                    fi
                    $0 start
                    ;;
                    status)
                    if is_running; then
                        echo "Running"
                    else
                        echo "Stopped"
                        exit 1
                    fi
                    ;;
                    *)
                    echo "Usage: $0 {start|stop|restart|status}"
                    exit 1
                    ;;
                esac
                exit 0
              mode: '000755'
              owner: root
              group: root
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
                [/var/log/oauth2_proxy.log]
                file = /var/log/oauth2_proxy.log
                log_stream_name = {instance_id}/var/log/oauth2_proxy.log
                log_group_name = ${Logs}
                [/var/log/oauth2_proxy.err]
                datetime_format = %Y/%m/%d %H:%M:%S
                file = /var/log/oauth2_proxy.err
                log_stream_name = {instance_id}/var/log/oauth2_proxy.err
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchConfiguration
                runas=root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              oauth2_proxy:
                enabled: true
                ensureRunning: true
                sources:
                - '/opt/oauth2_proxy'
                files:
                - '/etc/oauth2_proxy.cfg'
                - '/etc/init.d/oauth2_proxy'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: 1
      MinSize: 1
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      Tags:
      - Key: Name
        Value: 'Auth proxy'
        PropagateAtLaunch: true
      TargetGroupARNs:
      - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier:
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT10M
        WaitOnResourceSignals: true
Outputs:
  SecurityGroup:
    Description: 'Use this Security Group to reference incoming traffic from the auth proxy.'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  DNSName:
    Description: 'The DNS name for the auth proxy load balancer.'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the auth proxy.'
    Value: !Sub 'https://${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
