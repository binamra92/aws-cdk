{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Security: highly available auth proxy using your GitHub Organization, a cloudonaut.io template",
  "Parameters": {
    "VPC": {
      "Description": "Use VPC output from vpc/vpc-*azs stack.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PublicSubnets": {
      "Description": "Use SubnetAPublic, SubnetBPublic [, SubnetCPublic[, SubnetDPublic]] output from vpc/vpc-*azs stack.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "CertificateArn": {
      "Description": "The Amazon Resource Name (ARN) of the certificate to associate with the auth proxy endpoint.",
      "Type": "String",
    },
    "SSHBastionSecurityGroup": {
      "Description": "Optional use SSHBastionSecurityGroup output from vpc/vpc-ssh-bastion stack.",
      "Type": "String",
      "Default": ""
    },
    "KeyName": {
      "Description": "Optional key pair of the ec2-user to establish a SSH connection to the auth proxy.",
      "Type": "String",
      "Default": ""
    },
    "IAMUserSSHAccess": {
      "Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.nano",
      "Description": "Instance type of the auth proxy."
    },
    "LogsRetentionInDays": {
      "Description": "Specifies the number of days you want to retain log events.",
      "Type": "Number",
      "AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653],
      "Default": 14
    },
    "NewRelicLicenseKey": {
      "Description": "Optional New Relic License Key will install the New Relic Servers for Linux agent.",
      "Type": "String",
      "Default": "",
      "NoEcho": "true"
    },
    "GitHubOrganization": {
      "Description": "GitHub organization name.",
      "Type": "String"
    },
    "GitHubClientId": {
      "Description": "GitHub client id. Register a new application here: https://github.com/organizations/$YOUR_ORGANIZATION/settings/applications",
      "Type": "String"
    },
    "GitHubClientSecret": {
      "Description": "GitHub client secret. Register a new application here: https://github.com/organizations/$YOUR_ORGANIZATION/settings/applications",
      "Type": "String",
      "NoEcho": "true"
    },
    "Upstream": {
      "Description": "HTTP(S) upstream for the proxy to redirect requests.",
      "Type": "String"
    },
    "CookieSecret": {
      "Description": "Seed string for secure cookies. Create one with python -c 'import os,base64; print base64.b64encode(os.urandom(16))'",
      "Type": "String",
      "NoEcho": "true"
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-south-1": {"AMI": "ami-ffbdd790"},
      "eu-west-1": {"AMI": "ami-f9dd458a"},
      "ap-southeast-1": {"AMI": "ami-a59b49c6"},
      "ap-southeast-2": {"AMI": "ami-dc361ebf"},
      "eu-central-1": {"AMI": "ami-ea26ce85"},
      "ap-northeast-2": {"AMI": "ami-2b408b45"},
      "ap-northeast-1": {"AMI": "ami-374db956"},
      "us-east-1": {"AMI": "ami-6869aa05"},
      "sa-east-1": {"AMI": "ami-6dd04501"},
      "us-west-1": {"AMI": "ami-31490d51"},
      "us-west-2": {"AMI": "ami-7172b611"}
    }
  },
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]},
    "HasIAMUserSSHAccess": {"Fn::Equals": ["true", {"Ref": "IAMUserSSHAccess"}]},
    "HasSSHBastionSecurityGroup": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "SSHBastionSecurityGroup"}]}]},
    "HasNewRelic": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "NewRelicLicenseKey"}]}]}
  },
  "Resources": {
    "Logs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {"Ref": "LogsRetentionInDays"}
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Auth proxy",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": 443,
          "ToPort": 443,
          "CidrIp": "0.0.0.0/0"
        }]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}],
        "Subnets": {"Ref": "PublicSubnets"},
        "Tags": [{
          "Key": "Name",
          "Value": "Auth proxy"
        }]
      }
    },
    "LoadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 15,
        "HealthCheckPath": "/ping",
        "HealthCheckPort": 4180,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 8,
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 4180,
        "Protocol": "HTTP",
        "Tags": [{
          "Key": "Name",
          "Value": "Auth proxy"
        }],
        "VpcId": {"Ref": "VPC"}
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [{
          "CertificateArn": {"Ref": "CertificateArn"}
        }],
        "DefaultActions": [{
          "TargetGroupArn": {"Ref": "LoadBalancerTargetGroup"},
          "Type": "forward"
        }],
        "LoadBalancerArn": {"Ref": "LoadBalancer"},
        "Port": 443,
        "Protocol": "HTTPS"
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Auth proxy",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": 4180,
          "ToPort": 4180,
          "SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"}
        }],
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SecurityGroupInSSHBastion": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "HasSSHBastionSecurityGroup",
      "Properties": {
        "GroupId": {"Ref": "SecurityGroup"},
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "SourceSecurityGroupId": {"Ref": "SSHBastionSecurityGroup"}
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{"Ref": "IAMRole"}]
      }
    },
    "IAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["ec2.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "logs",
          "PolicyDocument":{
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*"
              ]
            }]
          }
        }]
      }
    },
    "IAMPolicySSHAccess": {
      "Type": "AWS::IAM::Policy",
      "Condition": "HasIAMUserSSHAccess",
      "Properties": { 
        "Roles": [{"Ref": "IAMRole"}],
        "PolicyName": "iam",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "iam:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          }, {
            "Effect": "Allow",
            "Action": [
              "iam:ListSSHPublicKeys",
              "iam:GetSSHPublicKey"
            ],
            "Resource": [
              {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"}
            ]
          }]
        }
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": {"Fn::If": ["HasNewRelic",
              {"Fn::If": ["HasIAMUserSSHAccess",
                ["ssh-access", "newrelic", "config"],
                ["newrelic", "config"]]}, 
              {"Fn::If": ["HasIAMUserSSHAccess",
                ["ssh-access", "config"],
                ["config"]]
              }]
            }
          },
          "newrelic": {
            "packages": {
              "rpm": {
                "newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm"
              }
            },
            "files": {
              "/etc/newrelic/nrsysmond.cfg": {
                "content": {"Fn::Join": ["", [
                  "license_key=", {"Ref": "NewRelicLicenseKey"}, "\n",
                  "loglevel=info", "\n",
                  "logfile=/var/log/newrelic/nrsysmond.log", "\n",
                  "labels=StackName:", {"Ref": "AWS::StackName"}, ";AccountId:", {"Ref": "AWS::AccountId"}, ";Region:", {"Ref": "AWS::Region"}, "\n"
                ]]},
                "mode": "000640",
                "owner": "root",
                "group": "newrelic"
              }
            },
            "services": {
              "sysvinit": {
                "newrelic-sysmond": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/newrelic/nrsysmond.cfg"
                  ]
                }
              }
            }
          },
          "ssh-access": {
            "users": {
              "oauth2_proxy": {
              }
            },
            "files": {
              "/opt/authorized_keys_command.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash -e", "\n",
                  "if [ -z \"$1\" ]; then", "\n",
                  "  exit 1", "\n",
                  "fi", "\n",
                  "aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do", "\n",
                  "  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text", "\n",
                  "done", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/opt/import_users.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "aws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do", "\n",
                  "  if id -u \"$User\" >/dev/null 2>&1; then", "\n",
                  "    echo \"$User exists\"", "\n",
                  "  else", "\n",
                  "    /usr/sbin/adduser \"$User\"", "\n",
                  "    echo \"$User ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$User\"", "\n",
                  "  fi", "\n",
                  "done", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/import_users": {
                "content": "*/10 * * * * root /opt/import_users.sh\n",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "a_configure_sshd_command": {
                "command": "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
              },
              "b_configure_sshd_commanduser": {
                "command": "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
              },
              "c_import_users": {
                "command": "./import_users.sh",
                "cwd": "/opt"
              }
            },
            "services": {
              "sysvinit": {
                "sshd": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "commands": [
                    "a_configure_sshd_command",
                    "b_configure_sshd_commanduser"
                  ]
                }
              }
            }
          },
          "config": {
            "sources": {
              "/opt/oauth2_proxy": "https://github.com/bitly/oauth2_proxy/releases/download/v2.1/oauth2_proxy-2.1.linux-amd64.go1.6.tar.gz"
            },
            "packages": {
              "yum": {
                "awslogs": []
              }
            },
            "files": {
              "/etc/oauth2_proxy.cfg": {
                "content": {"Fn::Join": ["", [
                  "## OAuth2 Proxy Config File", "\n",
                  "## https://github.com/bitly/oauth2_proxy", "\n",
                  "http_address = \"0.0.0.0:4180\"", "\n",
                  "upstreams = [", "\n",
                  "  \"", {"Ref": "Upstream"}, "\"", "\n",
                  "]", "\n",
                  "request_logging = false", "\n",
                  "pass_basic_auth = false", "\n",
                  "email_domains = [", "\n",
                  "  \"*\"", "\n",
                  "]", "\n",
                  "client_id = \"", {"Ref": "GitHubClientId"}, "\"", "\n",
                  "client_secret = \"", {"Ref": "GitHubClientSecret"}, "\"", "\n",
                  "cookie_secret = \"", {"Ref": "CookieSecret"}, "\"", "\n",
                  "provider = \"github\"", "\n",
                  "github-team = \"", {"Ref": "GitHubOrganization"}, "\"", "\n",
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/init.d/oauth2_proxy": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/sh", "\n",
                  "### BEGIN INIT INFO", "\n",
                  "# Provides:", "\n",
                  "# Required-Start:    $remote_fs $syslog", "\n",
                  "# Required-Stop:     $remote_fs $syslog", "\n",
                  "# Default-Start:     2 3 4 5", "\n",
                  "# Default-Stop:      0 1 6", "\n",
                  "# Short-Description: Start daemon at boot time", "\n",
                  "# Description:       Enable service provided by daemon.", "\n",
                  "### END INIT INFO", "\n",
                  "", "\n",
                  "dir=\"/opt/oauth2_proxy/oauth2_proxy-2.1.linux-amd64.go1.6\"", "\n",
                  "cmd=\"./oauth2_proxy -config=/etc/oauth2_proxy.cfg\"", "\n",
                  "user=\"oauth2_proxy\"", "\n",
                  "", "\n",
                  "name=`basename $0`", "\n",
                  "pid_file=\"/var/run/$name.pid\"", "\n",
                  "stdout_log=\"/var/log/$name.log\"", "\n",
                  "stderr_log=\"/var/log/$name.err\"", "\n",
                  "", "\n",
                  "get_pid() {", "\n",
                  "    cat \"$pid_file\"", "\n",
                  "}", "\n",
                  "", "\n",
                  "is_running() {", "\n",
                  "    [ -f \"$pid_file\" ] && ps `get_pid` > /dev/null 2>&1", "\n",
                  "}", "\n",
                  "", "\n",
                  "case \"$1\" in", "\n",
                  "    start)", "\n",
                  "    if is_running; then", "\n",
                  "        echo \"Already started\"", "\n",
                  "    else", "\n",
                  "        echo \"Starting $name\"", "\n",
                  "        cd \"$dir\"", "\n",
                  "        if [ -z \"$user\" ]; then", "\n",
                  "            sudo $cmd >> \"$stdout_log\" 2>> \"$stderr_log\" &", "\n",
                  "        else", "\n",
                  "            sudo -u \"$user\" $cmd >> \"$stdout_log\" 2>> \"$stderr_log\" &", "\n",
                  "        fi", "\n",
                  "        echo $! > \"$pid_file\"", "\n",
                  "        if ! is_running; then", "\n",
                  "            echo \"Unable to start, see $stdout_log and $stderr_log\"", "\n",
                  "            exit 1", "\n",
                  "        fi", "\n",
                  "    fi", "\n",
                  "    ;;", "\n",
                  "    stop)", "\n",
                  "    if is_running; then", "\n",
                  "        echo -n \"Stopping $name..\"", "\n",
                  "        kill `get_pid`", "\n",
                  "        for i in {1..10}", "\n",
                  "        do", "\n",
                  "            if ! is_running; then", "\n",
                  "                break", "\n",
                  "            fi", "\n",
                  "            echo -n \".\"", "\n",
                  "            sleep 1", "\n",
                  "        done", "\n",
                  "        echo", "\n",
                  "        if is_running; then", "\n",
                  "            echo \"Not stopped; may still be shutting down or shutdown may have failed\"", "\n",
                  "            exit 1", "\n",
                  "        else", "\n",
                  "            echo \"Stopped\"", "\n",
                  "            if [ -f \"$pid_file\" ]; then", "\n",
                  "                rm \"$pid_file\"", "\n",
                  "            fi", "\n",
                  "        fi", "\n",
                  "    else", "\n",
                  "        echo \"Not running\"", "\n",
                  "    fi", "\n",
                  "    ;;", "\n",
                  "    restart)", "\n",
                  "    $0 stop", "\n",
                  "    if is_running; then", "\n",
                  "        echo \"Unable to stop, will not attempt to start\"", "\n",
                  "        exit 1", "\n",
                  "    fi", "\n",
                  "    $0 start", "\n",
                  "    ;;", "\n",
                  "    status)", "\n",
                  "    if is_running; then", "\n",
                  "        echo \"Running\"", "\n",
                  "    else", "\n",
                  "        echo \"Stopped\"", "\n",
                  "        exit 1", "\n",
                  "    fi", "\n",
                  "    ;;", "\n",
                  "    *)", "\n",
                  "    echo \"Usage: $0 {start|stop|restart|status}\"", "\n",
                  "    exit 1", "\n",
                  "    ;;", "\n",
                  "esac", "\n",
                  "", "\n",
                  "exit 0", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": {"Fn::Join": ["", [
                  "[default]", "\n",
                  "region = ", {"Ref": "AWS::Region"}, "\n",
                  "\n",
                  "[plugins]", "\n",
                  "cwlogs = cwlogs", "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {"Fn::Join": ["", [
                  "[general]", "\n",
                  "state_file = /var/lib/awslogs/agent-state", "\n",
                  "\n",
                  "[/var/log/messages]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/messages", "\n",
                  "log_stream_name = {instance_id}/var/log/messages", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/secure]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/secure", "\n",
                  "log_stream_name = {instance_id}/var/log/secure", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cron]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cron", "\n",
                  "log_stream_name = {instance_id}/var/log/cron", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init.log]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cloud-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cfn-hup.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-hup.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init-cmd.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init-cmd.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init-output.log]", "\n",
                  "file = /var/log/cloud-init-output.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/dmesg]", "\n",
                  "file = /var/log/dmesg", "\n",
                  "log_stream_name = {instance_id}/var/log/dmesg", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/oauth2_proxy.log]", "\n",
                  "file = /var/log/oauth2_proxy.log", "\n",
                  "log_stream_name = {instance_id}/var/log/oauth2_proxy.log", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n",
                  "[/var/log/oauth2_proxy.err]", "\n",
                  "datetime_format = %Y/%m/%d %H:%M:%S", "\n",
                  "file = /var/log/oauth2_proxy.err", "\n",
                  "log_stream_name = {instance_id}/var/log/oauth2_proxy.err", "\n",
                  "log_group_name = ", {"Ref": "Logs"}, "\n",
                  "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n",
                  "interval=1", "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=LaunchConfiguration", "\n",
                  "runas=root", "\n"
                ]]}
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": ["awslogs"]
                  },
                  "files": [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                },
                "oauth2_proxy": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "sources": [
                    "/opt/oauth2_proxy"
                  ],
                  "files": [
                    "/etc/oauth2_proxy.cfg",
                    "/etc/init.d/oauth2_proxy"
                  ]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": true,
        "EbsOptimized": false,
        "IamInstanceProfile": {"Ref": "InstanceProfile"},
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "InstanceType"},
        "SecurityGroups": [{"Ref": "SecurityGroup"}],
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource LaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
          "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": "1",
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MaxSize": "1",
        "MinSize": "1",
        "HealthCheckGracePeriod": 120,
        "HealthCheckType": "ELB",
        "Tags": [{
          "Key": "Name",
          "Value": "Auth proxy",
          "PropagateAtLaunch": true
        }],
        "TargetGroupARNs": [{"Ref": "LoadBalancerTargetGroup"}],
        "VPCZoneIdentifier": {"Ref": "PublicSubnets"}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": "PT10M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": true
        }
      }
    }
  },
  "Outputs": {
    "AuthProxySecurityGroup": {
      "Description": "Use this Security Group to reference incoming traffic from the auth proxy.",
      "Value": {"Ref": "SecurityGroup"}
    },
    "AuthProxyDNSName": {
      "Value": {"Fn::GetAtt": ["LoadBalancer", "DNSName"]},
      "Description": "The DNS name for the auth proxy load balancer."
    }
  }
}
